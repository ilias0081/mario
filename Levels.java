// Ilias Belassel
// Levels.java

import java.awt.*;
import java.util.*;
import javax.sound.midi.*;

class Levels {
  // 0 - empty air
  // 1 - ground block
  // 2 - hard block
  // 3 - coin
  // 4 - goomba
  // 5 - green koopa
  // 6 - red koopa
  // # 30's: 0 - empty, 1 - has coin, 2 - has fireflower, 3 - has star, 4 - has 1-up, 5 - multiple coins
  // ? 40's: 0 - empty, 1 - has coin, 2 - has fireflower, 3 - has star, 4 - has 1-up
  // P 50's: first digit indicates pipe height (+2)
  // P 60's: first digit indicates pipe height (+2)(with pirhanna)

                    


  public static int[][] test_level = 
   
 {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,65, 0, 0, 0},
  { 0, 0,30,31,32,33,34,35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 3, 3, 3, 3, 3, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0,40,41,42,43,44,35, 0,30, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 4, 0, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,61, 0, 0, 0, 0, 0, 0},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,60, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,50, 0, 2, 0, 0, 2, 0, 0, 2, 2},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2}};

  public static int[][] level_1 = 
   {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30, 0, 0, 0,31,31,31,41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30, 0, 0, 0, 0,30,41,41,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,41, 0, 0, 0,30,42,30,41,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,42,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,35, 0, 0, 0, 0, 0, 0,30,33, 0, 0, 0, 0,41, 0, 0,41, 0, 0,41, 0, 0, 0, 0, 0,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,41,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0,50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,50, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

  public static int[][] level_1_sub =
 {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0,30,30,30,30,30,30,30, 0, 0, 0, 0,59, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0,30,30,30,30,30,30,30, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0,30,30,30,30,30,30,30, 0, 0,59, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0,30,30,30,30,30,30,30, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

  // level 2 ---------------------------------------------------------------
  public static int[][] level_2_start = 
  {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,50, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

  public static int[][] level_2_main = 
 {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {},
  {},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0,30,30,30,30,30,30, 0, 0,30,30,30,30, 0, 0, 0, 4, 0, 0,30,30,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0,30, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0,30, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30, 0,30,30,30,30, 0,33, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0,30, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,35, 0, 0, 0, 0, 0, 0, 0, 0, 0,30, 3,30, 0, 0,30, 3,30, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 3, 3, 3, 3,30,30, 0, 0, 0,30, 3,32, 0, 0,30,35, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0,30,30,30,30,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0,30,30,30,30,30,32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,50, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0,42,41,41,41,41, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30, 0, 0,30,30,30, 0, 0, 0, 0, 0,30,30,30,30, 0, 0,30,30,30,30,30,30, 0, 0, 0,30,30,30, 0, 0,30,30, 0, 0,30,30,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30, 0,51, 0, 0,51, 0, 0,51, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,60, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 4, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

  public static int[][] level_2_sub = 
 {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {30, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30,59, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0,30,30,30,30,30,30,30,30,30,30,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0,30,30,30,30,30,30,30,30,30,35,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30},
  {30, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0,30,30,30,30,30,30,30,30,30,30},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,50, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

  public static int[][] level_2_end = 
 {{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0,50, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

  public static int[][] level_3 = 
 {{30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 0, 0, 0, 0, 6, 6, 0, 0, 0, 6, 6, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,34,44,34,34,44,34, 0, 0, 0, 0, 1},
  {30, 0,42,42,42,42,42,42,42,42, 0, 0, 0, 0, 0, 0, 4, 2, 4, 4, 2, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
  {30, 0,43,43,43,43,43,43,43,43, 0, 0, 0, 0, 2, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,56, 0,56, 0,56, 0, 0, 0, 0, 0, 0},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 2, 0, 4, 2, 0, 0, 0,53, 0, 3, 3, 3,53, 0, 3, 3, 3,53, 0, 3, 3, 3,53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 2, 0, 4, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {30, 0,43,43,43,43,43,43,43,43, 0, 0, 0, 0, 0, 0, 4, 2, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
  


  
  Levels(){

  }


  // all these function below go through the double arrays to add all the game data
  // 

  public static ArrayList<ArrayList<Rectangle>> get_blocks(int[][] level){
    ArrayList<Rectangle> groundRects = new ArrayList<Rectangle>();
    ArrayList<Rectangle> hardRects = new ArrayList<Rectangle>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] == 1){
          groundRects.add(new Rectangle(x*50,y*50,50,50));
        }
        if (level[y][x] == 2){
          hardRects.add(new Rectangle(x*50,y*50,50,50));
        }
      }
    }
    ArrayList<ArrayList<Rectangle>> tmp =  new ArrayList<ArrayList<Rectangle>>();
    tmp.add(groundRects);
    tmp.add(hardRects);
    return tmp;
  }
  
  
  public static ArrayList<BrickBlock> get_bricks(int[][] level){
    ArrayList<BrickBlock> blocks = new ArrayList<BrickBlock>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] >= 30 && level[y][x] <= 39){
          blocks.add(new BrickBlock(x*50,y*50,level[y][x] - 30));
        }       
      }
    }
    return blocks;
  }
  
  public static ArrayList<QuestionBlock> get_question_blocks(int[][] level){
    ArrayList<QuestionBlock> blocks = new ArrayList<QuestionBlock>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] >= 40 && level[y][x] <= 49){
          blocks.add(new QuestionBlock(x*50,y*50,level[y][x] - 40));
        }       
      }
    }
    return blocks;
  }
  
  public static ArrayList<Coin> get_coins(int[][] level){
    ArrayList<Coin> coins = new ArrayList<Coin>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] == 3){
          coins.add(new Coin(x*50,y*50));
        }       
      }
    }
    return coins;
  }
  
  public static ArrayList<Goomba> get_goombas(int[][] level){
    ArrayList<Goomba> goombas = new ArrayList<Goomba>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] == 4){
          goombas.add(new Goomba(x*50,y*50));
        }       
      }
    }
    return goombas;
  }
  
  public static ArrayList<Koopa> get_koopas(int[][] level){
    ArrayList<Koopa> koopas = new ArrayList<Koopa>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] == 5){
          koopas.add(new Koopa(x*50,y*50,"green"));
        }
        if (level[y][x] == 6){
          koopas.add(new Koopa(x*50,y*50,"red"));
        }
      }
    }
    return koopas;
  }
  public static ArrayList<Pipe> get_pipes(int[][] level){
    ArrayList<Pipe> pipes = new ArrayList<Pipe>();
    for (int y = 0; y < level.length; y++){
      for (int x = 0; x < level[0].length; x++){
        if (level[y][x] >= 50 && level[y][x] <= 59){
          pipes.add(new Pipe(x*50, y*50,level[y][x] - 48, false));
        }
        if (level[y][x] >= 60 && level[y][x] <= 69){
          pipes.add(new Pipe(x*50, y*50,level[y][x] - 58, true));
        }
      }
    }
    return pipes;
  }
}

// this class is basically a copy of BrickBlock
class QuestionBlock {
  public Rectangle rect;
  int item;
  boolean isFull = true;
  QuestionBlock(int xx, int yy, int item){
    rect = new Rectangle(xx,yy,50,50);
    if (item == 0 || item == 5){
      this.item = 1;
    }
    else{
      this.item = item;
    }
  }
  public void draw(Graphics g2d, int offset){
    if (isFull){
      g2d.drawImage(MarioPanel.question,rect.x-offset,rect.y,null);
    }
    else{
      g2d.drawImage(MarioPanel.empty_block,rect.x-offset,rect.y,null);
    }
  }
  public void collide(MarioPanel game){    
    if (item == 1 && isFull){
      game.coinPops.add(new CoinPop(rect.x,rect.y-25));
      isFull = false;
      game.coinCount += 1;
    }
    else if ((item == 2 || item == 3) && isFull){
      if (game.marioStatus == 0){
        game.mushrooms.add(new Mushroom(rect.x,rect.y-50));
      }
      else if (item == 2){
        game.fire_flowers.add(new FireFlower(rect.x, rect.y - 50));
      }
      else if (item == 3){
        game.stars.add(new Star(rect.x,rect.y - 50));
      }
      isFull = false;
    }
    else if (item == 4 && isFull){
      game.one_ups.add(new OneUp(rect.x,rect.y-50));
      isFull = false;
    }
  }
}

class BrickBlock {
  public Rectangle rect;
  int item;
  boolean isFull = true;
  int coinCount = 0;
  BrickBlock(int xx, int yy, int item){
    rect = new Rectangle(xx,yy,50,50);
    this.item = item;
  }
  public void draw(Graphics g2d, int offset){
    if (isFull){
      g2d.drawImage(MarioPanel.brick,rect.x-offset,rect.y,null);
    }
    else{
      g2d.drawImage(MarioPanel.empty_block,rect.x-offset,rect.y,null);
    }
  }
  public void collide(MarioPanel game){
    // for empty block, it deletes itself if mario is big
    if (item == 0 && game.marioStatus != 0){
      game.brick_rects.remove(this);
      for (int i = 0; i < game.all_rects.size(); i++){
        if (rect.x == game.all_rects.get(i).x && rect.y == game.all_rects.get(i).y){
          game.all_rects.remove(i);
          break;
        }
      }
    }
    // singular coin
    else if (item == 1 && isFull){
      game.coinPops.add(new CoinPop(rect.x,rect.y-25));
      isFull = false;
      game.coinCount += 1;
    }
    // if mario is small, they release mushrooms
    else if ((item == 2 || item == 3) && isFull){
      if (game.marioStatus == 0){
        game.mushrooms.add(new Mushroom(rect.x,rect.y-50));
      }
      else if (item == 2){
        game.fire_flowers.add(new FireFlower(rect.x, rect.y - 50));
      }
      else if (item == 3){
        game.stars.add(new Star(rect.x,rect.y - 50));
      }
      isFull = false;
    }
    // multiple coins
    else if (item == 5 && isFull){
      game.coinPops.add(new CoinPop(rect.x,rect.y-25));
      game.coinCount += 1;
      coinCount++;
      if (coinCount > 8){
        isFull = false;
      }
    }
    // one ups
    else if (item == 4 && isFull){
      game.one_ups.add(new OneUp(rect.x,rect.y-50));
      isFull = false;
    }
  }
}
class Coin {
  public Rectangle rect;
  Coin(int x, int y){
    rect = new Rectangle(x,y,50,50);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.coin,rect.x-offset,rect.y,null);
  }
  public void collide(MarioPanel game){
    // increases coin total and score
    if (rect.intersects(game.player)){
      game.coinCount += 1;
      game.score += 200;
      game.coins.remove(this);
    }
  }
    
}

class Goomba {
  public Rectangle rect;
  int direction = -5;
  int vy = 0;
  boolean fallcheck = true;
  Rectangle saveblock = new Rectangle(0,0,0,0);
  Goomba(int x, int y){
    rect = new Rectangle(x,y,50,50);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.goomba,rect.x-offset,rect.y,null);
  }
  public void collide(MarioPanel game){
    int pBottom = game.player.y + game.player.height;
    // checks the collisions to see if mario collided with the top, which would kill the goomba
    // mario takes a hit if mario collides with any other side
    // collision logic is basically the same as mario's
    if (rect.intersects(game.player)){
      if (rect.y - pBottom >= -30 && rect.y - pBottom < 0 && game.vy > 0 && !game.starMario){
        game.player.y = rect.y - game.player.height;
        game.vy = -10;
        game.Score.add(new Score(rect.x-game.offset,rect.y,100));
        game.goombas.remove(this);
      }
      else{
        game.takeHit();
      }
    }
    // the goomba only moves when its in screen or close to it
    if (rect.x > game.offset - 50 && rect.x < game.offset + 850){
      rect.x += direction;
    }
    // collisions
    for (Rectangle r : game.all_rects){
      boolean[] bump = game.collide(rect,r);
      if (bump[0]){
        rect.y = r.y - rect.height;
        fallcheck = false;
        saveblock = r;
        vy = 0;
      }
      if (bump[1]){
        rect.x = r.x + r.width;
        direction *= -1;
      }
      if (bump[2]){
        rect.x = r.x - r.width;
        direction *= -1;
      }
    }
    Rectangle standingOn = new Rectangle(rect.x,rect.y+1,50,50);
    if (!standingOn.intersects(saveblock)){
      fallcheck = true;
    }
    if (fallcheck){
      vy += 1;
    }
    rect.y += vy;
  }
    
}
  // there are two types of koopas. one that falls off edges (green), and one that doesnt (red)
class Koopa {
  public Rectangle rect;
  String type;
  // 0 is normal, 1 is in shell, 2 is in shell and moving
  int status = 0;
  boolean fallcheck = true;
  int vy = 0;
  Rectangle saveblock = new Rectangle(0,0,0,0);
  int direction = -5;
  Koopa(int x, int y, String a){
    rect = new Rectangle(x,y,50,50);
    type = a;
  }
  public void draw(Graphics g2d, int offset){
   if (type.equals("green")){
     if (status == 0){
      g2d.drawImage(MarioPanel.green_koopa,rect.x-offset,rect.y,null);
     }
     else{
      g2d.drawImage(MarioPanel.green_shell,rect.x-offset,rect.y,null);
     }
   }
   else{
    if (status == 0){    
     g2d.drawImage(MarioPanel.red_koopa,rect.x-offset,rect.y,null);
    }
    else{
      g2d.drawImage(MarioPanel.red_shell,rect.x-offset,rect.y,null);
    }
   }
  }
  public void collide(MarioPanel game){
    // when the koopas enters the shell & moving state, it kills things in its way
    for (Goomba g : game.goombas){
      if (rect.intersects(g.rect) && status == 2){
        game.Score.add(new Score(rect.x-game.offset,rect.y,100));
        game.goombas.remove(g);
        break;
      }
    }
    for (Koopa g : game.koopas){
      if (rect.intersects(g.rect) && status == 2 && g != this){
        game.Score.add(new Score(rect.x-game.offset,rect.y,200));
        game.koopas.remove(g);
        break;
      }
    }

    int pBottom = game.player.y + game.player.height;
    // the status variable keeps track of if the koopa is walking (0), in its shell (1)
    // or in its shell and moving (3)
    // hitting the koopa in its walking state puts it in a shell state
    // if touched, itll move. mario must jump on it to make it stop moving
    // but it always stays a shell

    if (rect.intersects(game.player)){
      // mario colliding with the top changes the state of the koopa

      if (rect.y - pBottom >= -30 && rect.y - pBottom < 0 && game.vy > 0 && !game.starMario){
        if (status == 0){
          status = 1;
          game.player.y = rect.y - game.player.height;
          game.vy = -10;
        }
        else if (status == 2) {
          status = 1;
          game.player.y = rect.y - game.player.height;
          game.vy = -10;
        }
      }
      else{
        if (status == 0 || status == 2){
          game.takeHit();
        }
        else {
          status = 2;
          if (game.player.x + game.player.width/2 > rect.x + rect.width/2){
            direction = -10;
          }
          else{
            direction = 10;
          }
    
          game.invincible = 15;
        }
      }
    }
    if (status == 0 || status == 2){
      if (rect.x > game.offset - 50 && rect.x < game.offset + 850){
        rect.x += direction;
      }
    for (Rectangle r : game.all_rects){
      boolean[] bump = game.collide(rect,r);
      if (bump[0]){
        rect.y = r.y - rect.height;
        fallcheck = false;
        saveblock = r;
        vy = 0;
      }
      if (bump[1]){
        rect.x = r.x + r.width;
        direction *= -1;
      }
      if (bump[2]){
        rect.x = r.x - r.width;
        direction *= -1;
      }
    }
    Rectangle standingOn = new Rectangle(rect.x,rect.y+1,50,50);
    if (!standingOn.intersects(saveblock)){
      // only the green shell will ever fall anyway
      if (type.equals("green") || status == 2){
        fallcheck = true;
      }
      else{       
        direction *= -1;
      }
    }
    if (fallcheck){
      vy += 1;
    }
    rect.y += vy;
   }
  }
    
}

class Pipe {
  public Rectangle rect;
  int height;
  boolean hasPirhanna;
  Pipe(int x, int y, int height, boolean hasPirhanna){
    rect = new Rectangle(x,y,100,50*height);
    this.height = height;
    this.hasPirhanna = hasPirhanna;
  }
  public void draw(Graphics g2d, int offset, MarioPanel game){
    // draws the top, then draws the base for however tall it is
    g2d.drawImage(MarioPanel.pipe_top,rect.x-offset,rect.y,null);
    for (int i = 1; i < height; i++){
      g2d.drawImage(MarioPanel.pipe_base,rect.x-offset,rect.y+i*50,null);
    }
    if (hasPirhanna){
      // spawns piranha if it has one
      game.pirhannas.add(new Pirhanna(rect.x+25,rect.y+5));
      hasPirhanna = false;
    }
  }
}

// power ups

class Mushroom {
  Rectangle rect;
  int direction = 6;
  int vy = 0;
  Rectangle saveblock = new Rectangle(0,0,0,0);
  boolean fallcheck = false;
  Mushroom(int x, int y){
    rect = new Rectangle(x,y,50,50);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.mushroom, rect.x - offset, rect.y, null);
  }

  public void collide(MarioPanel game){
    // when the powerup is hit, it makes mario bigger and deletes itself
    if (game.player.intersects(rect)){
      if (game.marioStatus == 0){
        game.marioStatus = 1;
        game.player.y -= 40;
      }
      game.Score.add(new Score(rect.x-game.offset,rect.y,1000));
      game.mushrooms.remove(this);
    }
    if (rect.x > game.offset - 50 && rect.x < game.offset + 850){
      rect.x += direction;
    }
    for (Rectangle r : game.all_rects){
      boolean[] bump = game.collide(rect,r);
      if (bump[0]){
        rect.y = r.y - rect.height;
        fallcheck = false;
        saveblock = r;
        vy = 0;
      }
      if (bump[1]){
        rect.x = r.x + r.width;
        direction *= -1;
      }
      if (bump[2]){
        rect.x = r.x - r.width;
        direction *= -1;
      }
    }
    Rectangle standingOn = new Rectangle(rect.x,rect.y+1,50,50);
    if (!standingOn.intersects(saveblock)){
      fallcheck = true;
    }    
    if (fallcheck){
      vy += 1;
    }
    rect.y += vy;      
    
  }
}

class FireFlower {
  Rectangle rect;
  FireFlower(int x, int y){
    rect = new Rectangle (x,y,50,50);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.FireFlower,rect.x - offset, rect.y,null);
  }
  public void collide(MarioPanel game){
    if (rect.intersects(game.player)){
      if (game.marioStatus == 0){
        game.player.y -= 40;
        game.player.height = 80;
      }
      game.marioStatus = 2;
      game.Score.add(new Score(rect.x-game.offset,rect.y,1000));
      game.fire_flowers.remove(this);
    }
  }
}

class Fireball {
  Rectangle rect;
  int vx = 12;
  int vy;
  Fireball(int x, int y){
    rect = new Rectangle(x,y,20,20);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.fireball,rect.x-offset,rect.y,null);
  }
  public void collide(MarioPanel game){
    // when a fireball hits the ground, it bounces off, so vy becomes a negative number
    // no need for saveblock, since the fireball is never grounded
    // fireballs are deleted if it hits the side of a block
    for (Rectangle r : game.all_rects){
      boolean[] bump = game.collide(rect,r);
      if (bump[0]){
        rect.y = r.y - rect.height;
        vy = -15;
      }
      if (bump[1] || bump[2]){
        game.fireballs.remove(this);
        break;
      }
    }
    vy += 2;
    rect.y += vy;
    rect.x += vx;
    // destroyed when off-screen
    if (rect.x > 900+game.offset || rect.x < -50 + game.offset || rect.y > 700){
      game.fireballs.remove(this);
    }
    // the fireball kills everything it hits
    for (Goomba r : game.goombas){
      if (r.rect.intersects(rect)){
        game.goombas.remove(r);
        game.fireballs.remove(this);
        game.Score.add(new Score(rect.x-game.offset,rect.y,100));
        break;
      }
    }
    for (Koopa r : game.koopas){
      if (r.rect.intersects(rect)){
        game.koopas.remove(r);
        game.fireballs.remove(this);
        game.Score.add(new Score(rect.x-game.offset,rect.y,200));
        break;
      }
    }
    for (Pirhanna r : game.pirhannas){
      if (r.rect.intersects(rect)){
        game.pirhannas.remove(r);
        game.Score.add(new Score(rect.x-game.offset,rect.y,200));
        game.fireballs.remove(this);
        break;
      }
    }
  }
}

class Pirhanna {
  Rectangle rect;
  int origin;
  boolean isGoingUp;
  int holdCounter;
  int moveCounter;

  Pirhanna(int x, int y){
    rect = new Rectangle(x,y,50,75);
    origin = y;
    isGoingUp = true;
    holdCounter = 0;
    moveCounter = 0;
  }

  public void draw(Graphics g2d,int offset){
    g2d.drawImage(MarioPanel.pirhanna,rect.x-offset,rect.y,null);
  }

  public void collide(MarioPanel game){
    if (rect.intersects(game.player)){
      if (game.marioStatus == 1 && !game.starMario){
        game.player.y -= 40;
        game.player.height = 40;
      }
      game.takeHit();
    }
    // chat gpt made this
    // the pirhanna goes up and down, and holds for a time at max height and depth
    // the max depth is what its spawn y value (origin)
    if (holdCounter > 0) {
      holdCounter--;
      return;
    }
    if (moveCounter == 0) {
      if (isGoingUp) {
        rect.y--;
        if (rect.y <= origin - 75) {
          isGoingUp = false;
          moveCounter = 30;
        }
      } else {
        rect.y++;
        if (rect.y >= origin+20) {
          isGoingUp = true;
          moveCounter = 30;
        }
      }
    } else {
      moveCounter--;
    }
  }
}

// copy and paste of mushroom
class Star{
  Rectangle rect;
  int direction = 6;
  int vy = 0;
  Rectangle saveblock = new Rectangle(0,0,0,0);
  boolean fallcheck = false;
  Star(int x, int y){
    rect = new Rectangle(x,y,50,50);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.Star,rect.x-offset,rect.y,null);
  }
  public void collide(MarioPanel game){
    if (game.player.intersects(rect)){
      // stars the star mario timer
      game.starMario = true;
      game.starMarioTimer = 600;
      game.Score.add(new Score(rect.x-game.offset,rect.y,1000));
      game.stars.remove(this);
    }
    if (rect.x > game.offset - 50 && rect.x < game.offset + 850){
      rect.x += direction;
    }
    for (Rectangle r : game.all_rects){
      boolean[] bump = game.collide(rect,r);
      if (bump[0]){
        rect.y = r.y - rect.height;
        fallcheck = false;
        saveblock = r;
        vy = 0;
      }
      if (bump[1]){
        rect.x = r.x + r.width;
        direction *= -1;
      }
      if (bump[2]){
        rect.x = r.x - r.width;
        direction *= -1;
      }
    }
    Rectangle standingOn = new Rectangle(rect.x,rect.y+1,50,50);
    if (!standingOn.intersects(saveblock)){
      fallcheck = true;
    }    
    if (fallcheck){
      vy += 1;
    }
    rect.y += vy;      
    
  }
}

class CoinPop {
  int x, y, origin;
  CoinPop(int xx, int yy){
    x = xx;
    y = yy;
    origin = y;
  }
  public void draw(Graphics g2d, int offset, MarioPanel game){
    // draws and goes up until it reaches its max height, then deletes itself
    g2d.drawImage(MarioPanel.coin,x-offset,y,null);
    y -= 6;
    if (y < origin - 100){
      game.Score.add(new Score(x-game.offset,origin,200));
      game.coinPops.remove(this);
    }
  }
}

// copy and paste of mushroom
class OneUp{
  Rectangle rect;
  int direction = 6;
  int vy = 0;
  Rectangle saveblock = new Rectangle(0,0,0,0);
  boolean fallcheck = false;
  OneUp(int x, int y){
    rect = new Rectangle(x,y,50,50);
  }
  public void draw(Graphics g2d, int offset){
    g2d.drawImage(MarioPanel.OneUp, rect.x - offset, rect.y, null);
  }

  public void collide(MarioPanel game){
    if (game.player.intersects(rect)){
      game.lives += 1;
      game.Score.add(new Score(rect.x-game.offset,rect.y,200));
      game.one_ups.remove(this);
    }
    if (rect.x > game.offset - 50 && rect.x < game.offset + 850){
      rect.x += direction;
    }
    for (Rectangle r : game.all_rects){
      boolean[] bump = game.collide(rect,r);
      if (bump[0]){
        rect.y = r.y - rect.height;
        fallcheck = false;
        saveblock = r;
        vy = 0;
      }
      if (bump[1]){
        rect.x = r.x + r.width;
        direction *= -1;
      }
      if (bump[2]){
        rect.x = r.x - r.width;
        direction *= -1;
      }
    }
    Rectangle standingOn = new Rectangle(rect.x,rect.y+1,50,50);
    if (!standingOn.intersects(saveblock)){
      fallcheck = true;
    }    
    if (fallcheck){
      vy += 1;
    }
    rect.y += vy;      
    
  }
}

// does the same thing as coin
class Score { 
  int x, y, origin, score;
  boolean addScore = true;
  Score(int xx, int yy, int score){
    x = xx;
    y = yy;
    origin = y;
    this.score = score;
  }
  public void draw(Graphics g2d, int offset, MarioPanel game){
    g2d.setColor(Color.WHITE);
    g2d.setFont(MarioPanel.mario_font.deriveFont(12f));
    g2d.drawString(Integer.toString(score),x,y);
    y -= 6;
    if (y < origin - 60){
      game.Score.remove(this);
    }
    if (addScore){
      game.score += score;
      addScore = false;
    }
  }
}


